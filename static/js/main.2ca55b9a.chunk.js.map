{"version":3,"sources":["components/Navigation.js","components/SkillBar/SkillBar.js","pages/Home.js","pages/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","handleSearch","react_default","a","createElement","Navbar","collapseOnSelect","bg","variant","sticky","expand","Container","lib","to","Brand","Toggle","style","border","aria-controls","Collapse","id","Nav","className","Link","Form","inline","FormControl","type","placeholder","Button","padding","alignSelf","onClick","this","Component","SkillBar","props","concat","skill","Fragment","display","textAlign","marginTop","name","width","Home","Jumbotron","backgroundColor","minHeight","fluid","Row","Col","xs","md","lg","SkillBar_SkillBar","Contact","App","react_router_dom","Navigation_Navigation","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ca55b9a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport {\n  Container,\n  Navbar,\n  Nav,\n  Form,\n  Button,\n  FormControl\n} from \"react-bootstrap\";\n\nexport default class Navigation extends Component {\n  handleSearch = () => {};\n  render() {\n    return (\n      <Navbar\n        collapseOnSelect\n        bg=\"primary\"\n        variant=\"dark\"\n        sticky=\"top\"\n        expand=\"lg\"\n      >\n        <Container>\n          <LinkContainer to=\"/\">\n            <Navbar.Brand>{\"COCO\"}</Navbar.Brand>\n          </LinkContainer>\n          <Navbar.Toggle\n            style={{ border: \"none\" }}\n            aria-controls=\"basic-navbar-nav\"\n          />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <LinkContainer to=\"/\">\n                <Nav.Link>Home</Nav.Link>\n              </LinkContainer>\n              <LinkContainer to=\"/contact\">\n                <Nav.Link>Contact</Nav.Link>\n              </LinkContainer>\n            </Nav>\n            <Nav>\n              <LinkContainer to=\"/portfolio\">\n                <Nav.Link>Portfolio</Nav.Link>\n              </LinkContainer>\n              <Form inline>\n                <Container>\n                  <FormControl\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    className=\"mr-sm-2\"\n                  />\n                  <Button\n                    style={{ padding: \"5px\", alignSelf: \"center\" }}\n                    onClick={this.handleSearch}\n                    variant=\"secondary\"\n                  >\n                    Search\n                  </Button>\n                </Container>\n              </Form>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./SkillBar.scss\";\n\n/**\n * props\n * name: String\n * skill: Number(0-100)\n */\n\nexport default function SkillBar(props) {\n  const styles = {\n    outbar: {\n      display: \"block\",\n      width: \"100%\",\n      height: \"20px\",\n      border: \"2px solid\",\n      borderRadius: \"8px\",\n      backgroundColor: \"none\"\n    },\n    inbar: {\n      width: `${props.skill}%`,\n      backgroundColor: \"green\",\n      height: \"16px\",\n      borderRadius: \"8px\"\n    }\n  };\n\n  // return (\n  //   <div>\n  //     <p>{props.name}</p>\n  //     <progress max=\"100\" value={props.skill}>\n  //       {/* <div style={styles.outbar}>\n  //         <div style={styles.inbar} />\n  //       </div> */}\n  //     </progress>\n  //   </div>\n  // );\n\n  return (\n    <>\n      <div className=\"progressbar\">\n        <span style={{ display: \"block\", textAlign: \"left\", marginTop: \"5px\" }}>\n          {props.name}\n        </span>\n        <div className=\"progressbar-container\">\n          <span\n            style={{ width: props.skill + \"%\" }}\n            className=\"progressbar-value\"\n          >\n            {props.skill} %\n          </span>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React, { Component } from \"react\";\n\nimport { Jumbotron, Container, Row, Col } from \"react-bootstrap\";\n\nimport SkillBar from \"../components/SkillBar/SkillBar\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <>\n        <Jumbotron\n          style={{ backgroundColor: \"#174fe8\", minHeight: \"50vh\" }}\n          fluid\n        >\n          <Container>\n            <h1>Test</h1>\n          </Container>\n        </Jumbotron>\n\n        <Container>\n          <Row>\n            <Col xs=\"12\" md=\"6\" lg=\"4\">\n              <Container>\n                <SkillBar name=\"html/5\" skill=\"80\" />\n                <SkillBar name=\"css/3\" skill=\"70\" />\n                <SkillBar name=\"javascript\" skill=\"60\" />\n              </Container>\n            </Col>\n            <Col xs=\"12\" md=\"6\" lg=\"4\">\n              content\n            </Col>\n            <Col xs=\"12\" md=\"6\" lg=\"4\">\n              content\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nexport default function Contact() {\n  return (\n    <div>\n      <Container>\n        <h1>Contact</h1>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Container } from \"react-bootstrap\";\n\n//Component imports\nimport Navigation from \"./components/Navigation\";\n\n//Pages imports\nimport Home from \"./pages/Home\";\n\nimport Contact from \"./pages/Contact\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navigation />\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/contact\" component={Contact} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./scss/custom.scss\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}