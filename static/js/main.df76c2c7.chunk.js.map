{"version":3,"sources":["components/Navigation.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","handleSearch","react_default","a","createElement","Navbar","collapseOnSelect","bg","variant","sticky","expand","Brand","href","Toggle","style","border","aria-controls","Collapse","id","Nav","className","Link","Form","inline","Container","FormControl","type","placeholder","Button","padding","alignSelf","onClick","this","Component","Home","Fragment","Jumbotron","App","Navigation_Navigation","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8VAWqBA,6MACnBC,aAAe,qFAEb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,kBAAgB,EAChBC,GAAG,UACHC,QAAQ,OACRC,OAAO,MACPC,OAAO,MAEPR,EAAAC,EAAAC,cAACC,EAAA,EAAOM,MAAR,CAAcC,KAAK,SAAS,QAC5BV,EAAAC,EAAAC,cAACC,EAAA,EAAOQ,OAAR,CACEC,MAAO,CAAEC,OAAQ,QACjBC,gBAAc,qBAEhBd,EAAAC,EAAAC,cAACC,EAAA,EAAOY,SAAR,CAAiBC,GAAG,oBAClBhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKC,UAAU,WACblB,EAAAC,EAAAC,cAACe,EAAA,EAAIE,KAAL,CAAUT,KAAK,SAAf,QACAV,EAAAC,EAAAC,cAACe,EAAA,EAAIE,KAAL,CAAUT,KAAK,SAAf,YAEFV,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,EAAIE,KAAL,CAAUT,KAAK,cAAf,aAEAV,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,QAAM,GACVrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,SACZP,UAAU,YAEZlB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEd,MAAO,CAAEe,QAAS,MAAOC,UAAW,UACpCC,QAASC,KAAK/B,aACdO,QAAQ,aAHV,sBA/BwByB,qBCPnBC,mLAEjB,OACEhC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAAA,+BALwB6B,mBCsBnBI,MAbf,WACE,OACEnC,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,QCPvBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.df76c2c7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Container,\n  Navbar,\n  Nav,\n  NavDropdown,\n  Form,\n  Button,\n  FormControl\n} from \"react-bootstrap\";\n\nexport default class Navigation extends Component {\n  handleSearch = () => {};\n  render() {\n    return (\n      <Navbar\n        collapseOnSelect\n        bg=\"primary\"\n        variant=\"dark\"\n        sticky=\"top\"\n        expand=\"lg\"\n      >\n        <Navbar.Brand href=\"#home\">{\"COCO\"}</Navbar.Brand>\n        <Navbar.Toggle\n          style={{ border: \"none\" }}\n          aria-controls=\"basic-navbar-nav\"\n        />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n            <Nav.Link href=\"#link\">Contact</Nav.Link>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"#portfolio\">Portfolio</Nav.Link>\n\n            <Form inline>\n              <Container>\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  className=\"mr-sm-2\"\n                />\n                <Button\n                  style={{ padding: \"5px\", alignSelf: \"center\" }}\n                  onClick={this.handleSearch}\n                  variant=\"secondary\"\n                >\n                  Search\n                </Button>\n              </Container>\n            </Form>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport { Jumbotron } from \"react-bootstrap\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <>\n        <Jumbotron>\n          <h1>Cococoon</h1>\n        </Jumbotron>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Container } from \"react-bootstrap\";\n\n//Component imports\nimport Navigation from \"./components/Navigation\";\n\n//Pages imports\nimport Home from \"./pages/Home\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Container>\n        <Router>\n          <Route exact path=\"/\" component={Home} />\n        </Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./scss/custom.scss\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}